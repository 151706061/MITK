
[ emitidl( push ) ];
[ emitidl( true ) ];
//
// Forward references and typedefs
//

struct __declspec(uuid("7858b9e0-5793-4be4-9b53-661d922790d2"))
/* LIBID */ __TDxInput;
struct /* coclass */ AngleAxis;
[export] __interface __declspec(uuid("1ef2baff-54e9-4706-9f61-078f7134fd35"))
/* dual interface */ IAngleAxis;
struct /* coclass */ Vector3D;
[export] __interface __declspec(uuid("8c2aa71d-2b23-43f5-a6ed-4df57e9cd8d5"))
/* dual interface */ IVector3D;
[export] __interface __declspec(uuid("e6929a4a-6f41-46c6-9252-a8cc53472cb1"))
/* dispinterface */ _ISensorEvents;
struct /* coclass */ Sensor;
[export] __interface __declspec(uuid("f3a6775e-6fa1-4829-bf32-5b045c29078f"))
/* dual interface */ ISensor;
[export] __interface __declspec(uuid("6b6bb0a8-4491-40cf-b1a9-c15a801fe151"))
/* dispinterface */ _IKeyboardEvents;
struct /* coclass */ Keyboard;
[export] __interface __declspec(uuid("d6f968e7-2993-48d7-af24-8b602d925b2c"))
/* dual interface */ IKeyboard;
[export] __interface __declspec(uuid("8fe3a216-e235-49a6-9136-f9d81fdadef5"))
/* dispinterface */ _ISimpleDeviceEvents;
struct /* coclass */ Device;
[export] __interface __declspec(uuid("cb3bf65e-0816-482a-bb11-64af1e837812"))
/* dual interface */ ISimpleDevice;
struct /* coclass */ TDxInfo;
[export] __interface __declspec(uuid("00612962-8fb6-47b2-bf98-4e8c0ff5f559"))
/* dual interface */ ITDxInfo;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IAngleAxis, __uuidof(IAngleAxis));
_COM_SMARTPTR_TYPEDEF(IVector3D, __uuidof(IVector3D));
_COM_SMARTPTR_TYPEDEF(_ISensorEvents, __uuidof(_ISensorEvents));
_COM_SMARTPTR_TYPEDEF(ISensor, __uuidof(ISensor));
_COM_SMARTPTR_TYPEDEF(_IKeyboardEvents, __uuidof(_IKeyboardEvents));
_COM_SMARTPTR_TYPEDEF(IKeyboard, __uuidof(IKeyboard));
_COM_SMARTPTR_TYPEDEF(_ISimpleDeviceEvents, __uuidof(_ISimpleDeviceEvents));
_COM_SMARTPTR_TYPEDEF(ISimpleDevice, __uuidof(ISimpleDevice));
_COM_SMARTPTR_TYPEDEF(ITDxInfo, __uuidof(ITDxInfo));

//
// Type library items
//

struct __declspec(uuid("512a6c3e-3010-401b-8623-e413e2acc138"))
AngleAxis;
    // [ default ] interface IAngleAxis

[uuid("1ef2baff-54e9-4706-9f61-078f7134fd35"),dual]
__interface IAngleAxis : IDispatch
{
    //
    // Raw methods provided by interface
    //

      [id(0x1),propget] HRESULT __stdcall X (
        [out,retval] double * pVal );
      [id(0x1),propput] HRESULT __stdcall X (
        [in] double pVal );
      [id(0x2),propget] HRESULT __stdcall Y (
        [out,retval] double * pVal );
      [id(0x2),propput] HRESULT __stdcall Y (
        [in] double pVal );
      [id(0x3),propget] HRESULT __stdcall Z (
        [out,retval] double * pVal );
      [id(0x3),propput] HRESULT __stdcall Z (
        [in] double pVal );
      [id(0x4),propget] HRESULT __stdcall Angle (
        [out,retval] double * pVal );
      [id(0x4),propput] HRESULT __stdcall Angle (
        [in] double pVal );
};

struct __declspec(uuid("740a7479-c7c1-44da-8a84-b5de63c78b32"))
Vector3D;
    // [ default ] interface IVector3D

[uuid("8c2aa71d-2b23-43f5-a6ed-4df57e9cd8d5"),dual]
__interface IVector3D : IDispatch
{
    //
    // Raw methods provided by interface
    //

      [id(0x1),propget] HRESULT __stdcall X (
        [out,retval] double * pVal );
      [id(0x1),propput] HRESULT __stdcall X (
        [in] double pVal );
      [id(0x2),propget] HRESULT __stdcall Y (
        [out,retval] double * pVal );
      [id(0x2),propput] HRESULT __stdcall Y (
        [in] double pVal );
      [id(0x3),propget] HRESULT __stdcall Z (
        [out,retval] double * pVal );
      [id(0x3),propput] HRESULT __stdcall Z (
        [in] double pVal );
      [id(0x4),propget] HRESULT __stdcall Length (
        [out,retval] double * pVal );
      [id(0x4),propput] HRESULT __stdcall Length (
        [in] double pVal );
};

[uuid("e6929a4a-6f41-46c6-9252-a8cc53472cb1"),dispinterface]
__interface _ISensorEvents : IDispatch
{
    //
    // Wrapper methods
    //

    // Methods:
   [id(0x1)] HRESULT SensorInput ( );
};

struct __declspec(uuid("85004b00-1aa7-4777-b1ce-8427301b942d"))
Sensor;
    // [ default ] interface ISensor
    // [ default, source ] dispinterface _ISensorEvents

[uuid("f3a6775e-6fa1-4829-bf32-5b045c29078f"),dual]
__interface ISensor : IDispatch
{
    //
    // Raw methods provided by interface
    //

      [id(0x1),propget] HRESULT __stdcall Translation (
        [out,retval] IVector3D * * pVal );
      [id(0x2),propget] HRESULT __stdcall Rotation (
        [out,retval] IAngleAxis * * pVal );
      [id(0x3),propget] HRESULT __stdcall Device (
        [out,retval] IDispatch * * pVal );
      [id(0x4),propget] HRESULT __stdcall Period (
        [out,retval] double * pVal );
};

[uuid("6b6bb0a8-4491-40cf-b1a9-c15a801fe151"),dispinterface]
__interface _IKeyboardEvents : IDispatch
{
    //
    // Wrapper methods
    //

    // Methods:
   [id(0x1)] HRESULT KeyDown (
        [in] int keyCode );
   [id(0x2)] HRESULT KeyUp (
        [in] int keyCode );
};

struct __declspec(uuid("25bbe090-583a-4903-a61b-d0ec629ac4ec"))
Keyboard;
    // [ default ] interface IKeyboard
    // [ default, source ] dispinterface _IKeyboardEvents

[uuid("d6f968e7-2993-48d7-af24-8b602d925b2c"),dual]
__interface IKeyboard : IDispatch
{
    //
    // Raw methods provided by interface
    //

      [id(0x1),propget] HRESULT __stdcall Keys (
        [out,retval] long * pVal );
      [id(0x2),propget] HRESULT __stdcall ProgrammableKeys (
        [out,retval] long * pVal );
      [id(0x3)] HRESULT __stdcall GetKeyLabel (
        [in] long key,
        [out,retval] BSTR * label );
      [id(0x4)] HRESULT __stdcall GetKeyName (
        [in] long key,
        [out,retval] BSTR * name );
      [id(0x5),propget] HRESULT __stdcall Device (
        [out,retval] IDispatch * * pVal );
      [id(0x6)] HRESULT __stdcall IsKeyDown (
        [in] long key,
        [out,retval] VARIANT_BOOL * isDown );
      [id(0x7)] HRESULT __stdcall IsKeyUp (
        [in] long key,
        [out,retval] VARIANT_BOOL * isUp );
};

[uuid("8fe3a216-e235-49a6-9136-f9d81fdadef5"),dispinterface]
__interface _ISimpleDeviceEvents : IDispatch
{
    //
    // Wrapper methods
    //

    // Methods:
   [id(0x1)] HRESULT DeviceChange (
        [in] long reserved );
};

struct __declspec(uuid("82c5ab54-c92c-4d52-aac5-27e25e22604c"))
Device;
    // [ default ] interface ISimpleDevice
    // [ default, source ] dispinterface _ISimpleDeviceEvents

[uuid("cb3bf65e-0816-482a-bb11-64af1e837812"),dual]
__interface ISimpleDevice : IDispatch
{
    //
    // Raw methods provided by interface
    //

      [id(0x1)] HRESULT __stdcall Connect ( );
      [id(0x2)] HRESULT __stdcall Disconnect ( );
      [id(0x3),propget] HRESULT __stdcall Sensor (
        [out,retval] ISensor * * pVal );
      [id(0x4),propget] HRESULT __stdcall Keyboard (
        [out,retval] IKeyboard * * pVal );
      [id(0x5),propget] HRESULT __stdcall Type (
        [out,retval] long * pVal );
      [id(0x6),propget] HRESULT __stdcall IsConnected (
        [out,retval] VARIANT_BOOL * pVal );
      [id(0x7)] HRESULT __stdcall LoadPreferences (
        [in] BSTR PreferencesName );
};

struct __declspec(uuid("1a960ece-0e57-4a68-b694-8373114f1ff4"))
TDxInfo;
    // [ default ] interface ITDxInfo

[uuid("00612962-8fb6-47b2-bf98-4e8c0ff5f559"),dual]
__interface ITDxInfo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      [id(0x1)] HRESULT __stdcall RevisionNumber (
        [out,retval] BSTR * revision );
};

[ emitidl( pop ) ];