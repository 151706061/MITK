/**
\page IGTHowToImplementATrackingDevice How To Implement A Tracking Device

If you want to implement your own Tracking device, you need to do the following (see e.g. VitrualTrackerTypeInformation):

  1. Derive a class MyAwesomeTrackingDeviceInformation from the abstract class TrackingDeviceTypeInformation
  2. In the constructor of your class
       a) give your device a unique name ("my awesome device")
       b) push back at least one TrackingDeviceData corresponding to your device to m_TrackingDeviceData (TrackingDeviceType Line needs to be identical to your chosen device name "my awesome device")
  3. Implement the function CreateTrackingDeviceSource

Recommended Steps (but not necessary!):
  4. Provide a static function to get your tracking device name
     (recommended:
     \code{.cpp}
     static std::string MyAwesomeTrackingDeviceInformation::GetTrackingDeviceName()
     {
        return "my awesome device";
     }
     \endcode
     and use this function in your constructor for step 2a) and 2b))

                 This function will make it easier to implement options for your device in any other Module/Plugin.
                 If you want to check if the device in use is your device, you need to compare the names - and this can now be done in any
                 Plugin just by calling this static function. An if you later on decide to change the name of your device into
                 "my One And Only Device" - there is only one line of code you'll have to adapt.
                 Attention: If you change the name, you must edit all tool storages which were saved, e.g. using the IGT Navigation Tool Manager Plugin
                 Attention: You should use a static function instead of static variables due to the initialization order of static variables and the autoload module.

            5. Provide static functions for all your TrackingDeviceData
                 (recommended:
                 \code{.cpp}
                 TrackingDeviceData MyAwesomeTrackingDeviceInformation::GetDeviceDataForMyFirstDevice()
                 {
                               return{ MyAwesomeTrackingDeviceInformation::GetTrackingDeviceName(), "my Model", "my model volume location", "my hardware code" };
                 }
                 \endcode
                 )

            6. Register your Tracking Device to the collection:
            \code{.cpp}
                  #include <usGetModuleContext.h>
                  #include <usModule.h>
                  #include <usServiceProperties.h>
                  #include <usModuleContext.h>

                  mitk::TrackingDeviceTypeCollection* m_DeviceTypeCollection;
                  us::ModuleContext* context = us::GetModuleContext();
                  std::vector<us::ServiceReference<mitk::TrackingDeviceTypeCollection> > refs = context->GetServiceReferences<mitk::TrackingDeviceTypeCollection>();
                  if (refs.empty())
                  {
                    MITK_ERROR << "No tracking device service found!";
                  }
                  m_DeviceTypeCollection = context->GetService<mitk::TrackingDeviceTypeCollection>(refs.front());
                  m_DeviceTypeCollection->RegisterTrackingDeviceType(new mitk::MyAwesomeTrackingDeviceInformation());
              \endcode

                  You can do the registration anywhere in your code, also from external projects.
                  We recommend to do the registration of your tracking device in the autoload function of your module.
                  Devices, which should be always available (e.g. Polaris, Aurora, Virtual, ...) are registered in IGTExtActivator.

            7. Implement a widget to configure your device and register it to the collection
                  a) Derive a Widget class QmitkMyAwesomeTrackingDeviceWidget from QmitkAbstractTrackingDeviceWidget
                  b) Create a .ui file
                  c) Register it to TrackingDeviceWidgetCollection
                  \code{.cpp}
                      m_MyAwesomeWidget = new QmitkMyAwesomeTrackingDeviceWidget;
                      m_DeviceWidgetCollection.RegisterTrackingDeviceWidget(mitk::MyAwesomeTrackingDeviceInformation::GetTrackingDeviceName(), m_MyAwesomeWidget);
                      \endcode
                      (you can get the Widget collection analogous to step 6, replacing TrackingDeviceTypeCollection with TrackingDeviceWidgetCollection)

*/
