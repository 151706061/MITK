/*============================================================================

The Medical Imaging Interaction Toolkit (MITK)

Copyright (c) German Cancer Research Center (DKFZ)
All rights reserved.

Use of this source code is governed by a 3-clause BSD license that can be
found in the LICENSE file.

============================================================================*/


#ifndef __QMITK_DATA_GENERATION_JOB_BASE_H
#define __QMITK_DATA_GENERATION_JOB_BASE_H


//QT
#include <QRunnable>
#include <QObject>
#include <QMetaType>

//MITK
#include <mitkBaseData.h>

#include <MitkImageStatisticsUIExports.h>

namespace mitk
{
  static const std::string STATS_GENERATION_STATUS_PROPERTY_NAME = "MITK.statistic.generation.status";
  static const std::string STATS_GENERATION_STATUS_VALUE_WORK_IN_PROGRESS = "workInProgress";
  static const std::string STATS_GENERATION_STATUS_VALUE_PENDING = "pending";
  static const std::string STATS_GENERATION_STATUS_VALUE_BASE_DATA_FAILED = "failed";
}

/*!
\brief QmitkDataGenerationJobBase
Base class for all jobs. Each job wraps an implementation of DataGenerationComputationInterface to compute a computation in a multi threaded environment with Qt
\details the signal ResultsAvailable is emitted when the job is finished
the signal Error is emitted in case of an error
\example
QThreadPool* threadPool = QThreadPool::globalInstance();
auto voxelizationJob = new QmitkVoxelizationJob(doseImage, structContourModelSet, voxelizationNode);
connect(job, SIGNAL(ResultsAvailable(const mitk::DataStorage::SetOfObjects*, const QmitkDataGenerationJobBase*)), this, SLOT(OnFinalResultsAvailable(const mitk::DataStorage::SetOfObjects*, const QmitkDataGenerationJobBase*)));
threadPool->start(job);
*/
class MITKIMAGESTATISTICSUI_EXPORT QmitkDataGenerationJobBase : public QObject, public QRunnable
{
    // this is needed for all Qt objects that should have a Qt meta-object
    // (everything that derives from QObject and wants to have signal/slots)
    Q_OBJECT

public:
  QmitkDataGenerationJobBase(const QmitkDataGenerationJobBase& other) = delete;
  QmitkDataGenerationJobBase& operator=(const QmitkDataGenerationJobBase& other) = delete;

  /** Result map that indicates all results generated by the job.
   The key is a job specific label for the results.*/
  using ResultMapType = std::map<std::string, mitk::BaseData::Pointer>;

  virtual ResultMapType GetResults() const = 0;

  void run() final;

  /*!
  /brief Returns a flag the indicates if the jop computation was successfull.*/
  bool GetComputationSuccessFlag() const;

  std::string GetLastErrorMessage() const;

signals:
    void Error(QString err, const QmitkDataGenerationJobBase* job);
    /*! @brief Signal is emitted when results are available. 
    @param results a of base date objects produces by the job and ready tu use, put into storage.
    @param the job that produced the data
    */
    void ResultsAvailable(ResultMapType results, const QmitkDataGenerationJobBase* job);
    
protected:
  QmitkDataGenerationJobBase() = default;

  virtual ~QmitkDataGenerationJobBase() = default;

  /**Does the real computation. Returns true if there where results produced.*/
  virtual bool RunComputation() = 0;

  std::string m_LastErrorMessage;

private:
  bool m_ComputationSuccessful = false;
};

#endif
