'''
Created on Oct 20, 2015

@author: wirkert
'''

import numpy as np
from sklearn.cross_validation import KFold
from sklearn.grid_search import GridSearchCV
from sklearn.linear_model import LogisticRegression

def estimate_logistic_regressor(X_s, X_t):
    """ estimate a logistic regressor to predict the probability of a sample
    to be generated by one class or the other.
    If one class is over or under represented weights will be adapted.

    Parameters:
        X_s: samples from the source domain
        X_t: samples from the target domain

    Returns:
        Linear regressor which predicts the probability of a new sample to
        belong to the source domain """
    nr_s = X_s.shape[0]
    nr_t = X_t.shape[0]
    source_labels = np.zeros(nr_s)
    target_labels = np.ones(nr_t)
    allReflectances = np.concatenate((X_s, X_t))
    allLabels = np.concatenate((source_labels, target_labels))

    # train logistic regression
    kf = KFold(allReflectances.shape[0], 5, shuffle=True)
    # todo include intercept scaling paramter
    param_grid = [
      {'C': np.logspace(-3, 6, 10), 'fit_intercept':['True', 'False']} ]
    best_lr = GridSearchCV(LogisticRegression(class_weight="auto"),
                           param_grid, cv=kf, n_jobs=-1)
    best_lr.fit(allReflectances, allLabels)

    return best_lr.best_estimator_
