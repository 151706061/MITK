/**
\page GeneralTests General: Tests in MITK

\tableofcontents

\section GeneralTestsIntroduction Testing in MITK

The basic idea about unit testing is to write a test for every class (unit) of your software. The test should then run all methods of the tested class and check if the results are correct. MITK uses CppUnit, which provides a framework for efficient and fast test writing.

The following sections will explain how to write your own tests with MITK and how to run them. A specific type of <B>unit test</B> are <B>rendering tests</B>. These are explained in more detail in the section \ref RenderingTests.

\section GeneralTestsAdding Adding a test to your module

Generally code you want to test using unit tests will be located in a module. For an overview of the directory structure see \ref NewModulePageCreateFolder and how to add the files comprising your test compare \ref NewModulePageCreateTestingEnvironment

\subsection GeneralTestsAddingFramework The testing framework

In order to create a test you need to create a new class deriving from mitk::TestFixture. While a purist approach would be to create a new mitk::TestFixture for each method of your class (resulting in as many test source files as your class has methods), we usually follow a more pragmatic approach within MITK. In most cases we suggest having one test source file per class. If your class source file is called mitkGreatClass.cpp we suggest the name mitkGreatClassTest.cpp for your test source file. For very complex and long classes splitting this into several tests may be advisable.

In order to use CppUnit via MITK you will need to include the corresponding files and register your test:
\code
  #include <mitkTestingMacros.h>
  #include <mitkTestFixture.h>
  …
  MITK_TEST_SUITE_REGISTRATION(mitkImageEqual)
\endcode

\subsection GeneralTestsAddingHow How to structure your test

You should derive from mitk::TestFixture. A suggested name for your test class would be <CLASS_TO_BE_TESTED>TestSuite.

You then create a suite and register your test methods. A suggested naming convention for test methods is <METHOD_TO_BE_TESTED>_<INPUT_PARAMETERS/CONDITION>_<EXPECTED_RESULT>

An example:
\code
  class mitkImageEqualTestSuite : public mitk::TestFixture
  {
    CPPUNIT_TEST_SUITE(mitkImageEqualTestSuite);
    MITK_TEST(Equal_CloneAndOriginal_ReturnsTrue);
    MITK_TEST(Equal_InputIsNull_ReturnsFalse);
    MITK_TEST(Equal_DifferentImageGeometry_ReturnsFalse);
    MITK_TEST(Equal_DifferentPixelTypes_ReturnsFalse);
    …
    CPPUNIT_TEST_SUITE_END();
    …
  }
\endcode

You also need to provide a setUp() and a tearDown() function. These will be called before/after each test and should be used to make sure that each test method works independently and on freshly initialized members. That way you avoid only testing whether a function works after another function has already been called.

For an example test see \ref GeneralTestsExample

\section GeneralTestsRunning Running your test

The build system of MITK generates a test driver which includes all tests that have been added to the project. Alternatively you can run MITK tests by using the program ctest. This is the way all MITK tests run on the continuous dart clients of MITK. The results of these runs can be found at http://cdash.mitk.org.

If you use the test driver, you only need to start the executable. If you start it without parameters, it will then give you an overview of all tests which are included in this test driver and you can choose one by typing a number. 

\note This way you can not set additional input, such as images.

Alternatively you can give your test driver the name of your test as parameter. Then this test will be started directly. You are also allowed to give more parameters which are then given to the main test method as parameters (argv[]).

If you want to use ctest instead of the test driver you need to start a command line, go to the binary directory of MITK and call ctest. To avoid errors, check if your path variable contains all relevant paths to start MITK.

\section GeneralTestsExample An example

\include Examples\FirstSteps\NewModule\test\mitkExampleDataStructureTest.cpp

\section GeneralTestsFurtherInfo Further information

More examples can be found in the corresponding <a href="http://www.mitk.org/images/5/5d/BugSquashingSeminars%24CppUnitFrameworkSeminar.pdf"> bugsquashing presentation</a>.
*/
