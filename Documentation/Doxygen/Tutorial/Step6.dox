/**

\page Step6Page MITK Tutorial - Step 6: Use an interactive region-grower

In this step the program is enhanced by the possibility to start a region-grower at interactively added points.
We will see how MITK images can be accessed as ITK images.\n
We now load the image file only (mitk/Build/Testing/Pic3D.pic.gz) since the surface will be the result of the region-growing.

\image html step6_result.png 

The source is now split among several files:

\li \ref Step6.cpp "Step6.cpp"\n 
\li \ref Step6.h "Step6.h"\n 
\li \ref Step6RegionGrowing.txx "Step6RegionGrowing.txx"
\li \ref Step6RegionGrowing1.cpp "Step6RegionGrowing1.cpp"
\li \ref Step6RegionGrowing2.cpp "Step6RegionGrowing2.cpp"
\li \ref Step6main.cpp "Step6main.cpp"

The class Step6 inherits from QMainWindow and provides methods for setting up the widgets. Step6RegionGrowing.cpp contains a method for performing the region-growing. Step6main.cpp contains main.\n
As in ITK and VTK class member names start with m_ followed by the proper member name starting with a capital letter (e.g. m_Tree).
Function names start with capital letters. To learn more about style conventions in MITK read \ref StylesAndNotesPage "The MITK Style Guide".\n\n

\dontinclude Step6.cpp

The widgets are initialized as in the previous steps but with an additional QVBox for a button to start the segmentation:

\skipline m_TopLevelWidget = new QVBox(this);


Then a button is created to start the segmentation and its clicked() signal is connected to the method StartRegionGrowing():

\dontinclude Step6.cpp

\skipline QPushButton
\skipline connect

\section AccessMTIKImagesAsITKImagesSection Access MITK images as ITK images

ITK images are templated whereas mitk::Images are not.\n
Define an access method:

\code
template<...>
MyAccessMethod(itk::Image<...>* itkImage, ..)
{
...
}
\endcode

Then call the access method:

\code
AccessByItk(mitkImage, MyAccessMethod, ...)
\endcode

\dontinclude Step6RegionGrowing.txx

In this step our access method is called RegionGrowing() (defined in \ref Step6RegionGrowing.txx "Step6RegionGrowing.txx"):
\skipline template
\until }
\until }

Additionally the access function has to be instantiated for all datatypes and two/three dimensions as some compilers have memory problems without this explicit instantiation, some even need instantiations in separate files for 2D/3D: \n
For 2D in \ref Step6RegionGrowing1.cpp "Step6RegionGrowing1.cpp" :

\dontinclude Step6RegionGrowing1.cpp

\skipline InstantiateAccessFunctionForFixedDimension_1

... and for 3D in \ref Step6RegionGrowing2.cpp "Step6RegionGrowing2.cpp":

\dontinclude Step6RegionGrowing2.cpp

\skipline InstantiateAccessFunctionForFixedDimension_1

\dontinclude Step6.cpp

The method StartRegionGrowing() finally calls our access method RegionGrowing():
\skipline Step6::StartRegionGrowing
\until }

\section ConvertingITKMITKSection Converting ITK images to MITK images and vice versa

In some cases it is useful to simply convert between ITK and MITK images. The direction ITK to MITK is easy, since mitk::Image can handle all (most) data types. The direction MITK to ITK is more critical, since ITK images have to instantiated with a fixed pixel type and fixed dimension at compile time. 

\li \code mitk::CastToMitkImage(itk::Image<...>, mitkImage) \endcode : Convert ITK to MITK image.
\li \code mitk::CastToItkImage(mitkImage, itk::Image<...>) \endcode : Convert MITK to ITK image. Warning: Data types are converted if neccessary. The dimensions of the mitkImage and the itk::Image have to be equal.


\section ConnectingMITKToVTKSection Connecting MITK images to VTK

Images are not converted or copied: The data array is just accessed via an encapsulating VTK object.

\li \code vtkImageData* mitk::Image::GetVtkImageData(int time = 0) \endcode

\section SurfacesMITKToVTKSection MITK Surfaces to VTK and vice versa

Again: not a conversion, just accessing.

\li \code vtkPolyData* mitk::Surface::GetVtkPolyData(int time = 0) \endcode

\li \code mitk::Surface::SetVtkPolyData(vtkPolyData*, int time = 0) \endcode


\ref Step5Page "[Previous step]" \ref Step7Page "[Next step]" \ref TutorialPage "[Main tutorial page]"

*/
