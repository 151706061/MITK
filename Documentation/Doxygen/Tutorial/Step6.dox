 /**
 
 \page Step6Page Step 6 - Use an interactive region-grower
 
 In this step the program is enhanced by the possibility to start a region-grower at interactively added points.
 We will see how MITK images can be accessed as ITK images.\n\n
 
 
 The source is now split among several files:
 
 \li \ref Step6.cpp "Step6.cpp"\n 
 \li \ref Step6.h "Step6.h"\n 
 \li \ref Step6main.cpp "Step6main.cpp"
 

 The class Step6 inherits from QMainWindow and provides methods for setting up the widgets and for performing a region-growing.\n\n
 
 \dontinclude Step6.cpp
 
 The widgets are initialized as in the previous steps but with an additional QVBox for a button to start the segmentation:

 \skipline m_TopLevelWidget = new QVBox(this);
 

 Then a button is created to start the segmentation and its clicked() signal is connected to the method StartRegionGrowing():

 \dontinclude Step6.cpp

 \skipline QPushButton
 \skipline connect
 
\section AccessMTIKImagesAsITKImagesSection Access MITK images as ITK images

ITK images are templated whereas mitk::Images are not.\n
Define an access method:

\code
template<...>
MyAccessMethod(itk::Image<...>* itkImage, ..)
{
...
}
\endcode

Then call the access method:

\code
AccessByItk(mitkImage, MyAccessMethod, ...)
\endcode

In this step our access method is called RegionGrowing:
\skipline template
\until }
\until }

The method StartRegionGrowing() finally calls our access method RegionGrowing():
\skipline StartRegionGrowing
\until }

\section ConvertingITKMITKSection Converting ITK images to MITK images and vice versa

\li \code mitk::CastToMitkImage(itk::Image<...>, mitkImage) \endcode
\li \code mitk::CastToItkImage(mitkImage, itk::Image<...>) \endcode

Warning:\n
Data types are converted if neccessary.\n
The dimensions of the itk::Image and the mitkImage must equal.\n


\section ConnectingMITKToVTKSection Connecting MITK images to VTK

Images are not converted just accessed.

\li \code vtkImageData* mitk::Image::GetVtkImageData(int time = 0) \endcode

\section SurfacesMITKToVTKSection MITK Surfaces to VTK and vice versa

Again: not a conversion, just accessing

\li \code vtkPolyData* mitk::Surface::GetVtkPolyData(int time = 0) \endcode

\li \code mitk::Surface::SetVtkPolyData(vtkPolyData*, int time = 0) \endcode
 

 \ref Step5Page "[Previous step]" \ref Step7Page "[Next step]" \ref TutorialPage "[Main tutorial page]"
 
  */