/**
 
\page Step4Page Step 4 - Use several views to explore data
  
As in Step 2 and Step 3 one or more data sets may be loaded.\n
Now 3 views on the data are created.
The QmitkRenderWindow is used for displaying a 3D view as in Step 3, but without volume-rendering.
Furthermore two 2D views for slicing through the data are created. 
The class QmitkSliceWidget is used, which is based on the class QmitkRenderWindow, but additionally provides sliders 
to slice through the data. We create two instances of
QmitkSliceWidget, one for transversal and one for sagittal slicing.
The two slices are also shown at their correct position in 3D as well as intersection-line, each in the other 2D view.

\li \ref Step4.cpp "Step4.cpp"\n 
 
\image html step4a_result.png 
  
\dontinclude Step4.cpp

Create a Qt horizontal box for the layout:

\skipline QHBox

Then create a renderwindow:

\skipline QmitkRenderWindow
\until SetMapperID

Create a 2D view for slicing transversally:

\skipline view2
\until view2.SetData

Then create a 2D view for slicing sagitally.

\skipline view3
\until view3.SetData

The toplevelWidget is now the new main widget:

\skipline qtapplication
\skipline toplevelWidget.show

\section Step4bSection Step 4b - Display slice positions

\image html step4b_result.png 

We now want to see the position of the slice in 2D and the slice itself in 3D.
Therefore it has to be added to the tree:

\dontinclude Step4.cpp
\skipline it.Add(view2.GetRenderer()
\skipline it.Add(view3.GetRenderer()

Slice positions are now displayed as can be seen in the picture.\n
But: Slice positions are only updated when the window is resized.

\section Step4cSection Step 4c - Handle updates

\dontinclude Step4.cpp

\skipline Part V
\until updateController->AddRenderWindow(view3

\ref Step3Page "[Previous step]" \ref Step5Page "[Next step]" \ref TutorialPage "[Main tutorial page]"
 
  */