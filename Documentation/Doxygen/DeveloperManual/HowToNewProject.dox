/**
\page HowToNewProject Creating a new MITK project

This page is intended to give a comprehensive guide to setting up your own MITK based project. It will use the application framework provided by MITK and is probably the preferred way for most users.

\section HowToNewProjectGettingStarted Getting Started

To bootstrap your project MITK offers two convenient options:

<ol>
 <li> Use the MITK Plugin Generator, a command line tool used to generate a customized MITK project and/or MITK plug-ins (available for download <a href="http://www.mitk.org/Download#Plugin_Generator">here</a>).
 <li> Use the <a href="https://github.com/MITK/MITK-ProjectTemplate">MITK project template</a> as an example project.
</ol>

Both options will provide you with a project which contains a "superbuild" mechanism to automatically download, configure, and build MITK as a dependency of your own project.

The MITK Plugin Generator generates code using the supplied command line arguments, whereas the MITK project template needs immediate modifications to customize it to your naming schemes. However, the project template will potentially contain more code demonstrating features of MITK.

\note Using the MITK Plugin Generator is recommended for beginners.

\section HowToNewProjectPrerequisites Prerequisites

What ever option you choose, a MITK-based project needs essentially the same prerequisites as MITK itself. Please see \ref BuildInstructions_Prerequisites for details.
\note If you use one of the two options above you will \b not \b need to build MITK yourself. This will be done automatically.

\section HowToNewProjectCreatingSourceDir Preparing your source directory

In order to start developing with MITK, you first have to set up the source directory for your project.

\subsection HowToNewProjectSourceUsingGenerator Using the MITK Plugin Generator

The usage of the Plugin Generator for creating a new project is described in \ref NewPluginWithProject, please have a look there.

\subsection HowToNewProjectSourceUsingTemplate Using the MITK Project Template

Download the project as a tarball or zipball and extract it to your desired source directory.

\note This is a \b template \b. You must modify it such that it fits the needs of your particular project. Especially you should do a global search and replace for the string "awesome" to rename the template application and plug-in. You may want to rename some files too.

\section HowToNewProjectGeneratingCMake Generating your binary with CMake

After you have set up your source directory you can proceed to generate your binary directory using CMake. Depending on your operating system and preferences you might want to use "cmake-gui" or "ccmake" (shell). This document assumes you are using cmake-gui.

<ol>
 <li> Start "cmake-gui" and enter your source (e.g. D:\AwesomeProject) and binary directory (e.g. D:\AwesomeProject-superbuild).
 <li> Upon first pressing "Configure" you will be prompted to select your generator. This determines what project files will be generated by CMake. Set this to the development tool you are intending to use (e.g. "Visual Studio 2010 64Bit" or "linux makefiles".
 <li> Press "Configure" until no new variables appear and then "Generate". Now all project files have been generated into your binary directory.
 <li> Double-check that the right Qt version is used.
</ol>

Now you are ready to compile your code. Depending on your choice of tool this will be done differently, we cover two possibilities here.

\subsection HowToNewProjectCompilingLinuxMakefiles Compiling using linux makefiles

<ol>
 <li> In the shell, switch to your binary directory.
 <li> type "make" and hit enter
</ol>

\subsection HowToNewProjectCompilingVisualStudio Compiling using visual studio

We assume your application is called "AwesomeApp" and your project "AwesomeProject" and your binary directory is "D:\AwesomeProject-superbuild\". Replace names and paths accordingly.

<ol>
 <li> Close CMake and open "D:\AwesomeProject-superbuild\AwesomeProject-superbuild.sln" . Your Visual Studio should appear and by pressing F7 you start the compilation. This will clone the MITK source code, build it, and then start building your own project.
 <li> After the superbuild compilation has finished, close the solution file and start the batch file "D:\AwesomeProject-superbuild\AwesomeProject-build\StartVS_debug.bat" (or _release.bat if you built in Release mode) which opens the "D:\AwesomeProject-superbuild\AweseomeProject-build\AwesomeProject.sln" solution.
 <li> Set the "AwesomeApp" project as start-up project (right click > "Set as StartUp Project") and press "F5" to start your MITK AwesomeApp.
</ol>

\note Just opening AwesomeProject.sln from your explorer by double-cliking won`t allow you to start or debug your application because the required environment variables would be missing. Use the supplied batch files or set your PATH variable accordingly.

\section HowToNewProjectAddingMITKFunctionality I want to use some MITK plugin but it is not available

Due to the sheer number of MITK plugins not every plugin is activated by default. To activate a specific plugin (again replace paths as needed):
<ol>
 <li> Start "cmake-gui" and set the binary directory to "D:\AwesomeProject-superbuild\MITK-superbuild\MITK-build\", the source will adjust automatically and you will see new settings appear.
 <li> Navigate to the plugin you want to use (e.g. "MITK_BUILD_org.mitk.gui.qt.segmentation") and tick the checkbox behind it
 <li> Press "Configure" until no new variables appear and then "Generate".
 <li> Build MITK using your development tool (as in \ref HowToNewProjectCompilingLinuxMakefiles or \ref HowToNewProjectCompilingVisualStudio only in the "D:\AwesomeProject-superbuild\MITK-superbuild\MITK-build\" directory )
 <li> Start "cmake-gui" and set the binary directory to "D:\AwesomeProject-superbuild\AwesomeProject-build\", the source will adjust automatically and you will see new settings appear.
 <li> Press "Configure" until no new variables appear and then "Generate".
 <li> Build your project
 <li> Start your application
</ol>

\note If you want to use an application provided by MITK (e.g. MITK Workbench) you have to tick the appropriate checkbox as well (in this case MITK_BUILD_APP_mitkWorkbench ) and build MITK. Do note, that this application will be located in the bin directory of the "D:\AwesomeProject-superbuild\MITK-superbuild\MITK-build\" folder.

*/