/**
\page NewFunctionalityPage How to create a new functionality

\section CmakeFuncGen CMake-based functionality generator
The FunctionalityGenerator is a tool to simplify the process of creating your own MITK functionality and integrating it into the SampleApp.

\par Introduction
Start by building a MainApp. If everything works you have to think about a name for your new functionality and where you want
to put the source code. The generator uses the CMake GUI for configuration.  

\par Windows
\li Start the CMake GUI
\li Choose \c Build/Tools/FunctionalityGenerator as source directory
\li Choose a temporary directory as binary directory (create it if it doesn't exist)
\li Press "Configure" and don't care about the generator
\li Enter a name for the new functionality in the FUNCTIONALITY_NAME field
\li Check that FUNCTIONALITY_TEMPLATE was found
\li Turn on GENERATE_FUNCTIONALITY and press "Configure" once more.
\li After successfull generation CMake shows a message where you can find your new functionality.

\par Linux
\li Create a temporary directory and cd into it. 
\li Start <tt>ccmake</tt> with <tt>Build/Tools/FunctionalityGenerator</tt> as source directory
\li Press "Configure" 
\li Enter a name for the new functionality in the FUNCTIONALITY_NAME field
\li Check that FUNCTIONALITY_TEMPLATE was found
\li Turn on GENERATE_FUNCTIONALITY and press "Configure" once more.
\li After successfull generation CMake shows a message where you can find your new functionality.

\par Integrating your new functionality
Copy your new functionality from the temporary directory to the QFunctionalities directory in your MITK source tree.
(Hint for members of MBI: put it in \c mbi-sb/QFunctionalities !)

Switch back to the configuration of your MITK build. On Windows you can just switch the "Where to build the binaries" combobox back 
to your MITK binary directory. After pressing "Configure" a new build ption for your functionality should appear.

\section BuildSystem Build system for functionalities

Just put new files in your functionality directory and edit the \c files.cmake file there. If you have any fancy stuff like external libraries and include directories you should have a look at the CMake manual and general MITK build system documentation.
*/
