/**
\page BuildInstructionsPage Build Instructions

\section one Get a source tree

Since MITK is under active development we recommend to use subversion to get
the most recent version. To make sure you get a stable tree, check the <a
href="http://my.cdash.org/index.php?project=MITK">MITK
dashboard</a> at Kitware before checking out. If the build tree is not clean, you can specify an older revision for the checkout or get a stable tar ball from <a href="http://www.mitk.org">mitk.org</a>

To checkout MITK's current subversion repository do:

<tt>
svn co http://svn.mitk.org/trunk/mitk mitk
</tt>

If you prefer a graphical client (look <a href="http://subversion.tigris.org/links.html#clients">here [subversion.tigris.org]</a> for a list), use <tt>svn://mbi.dkfz-heidelberg.de/mitkExt/trunk/mitk</tt> as the repository URL for the trunk.

\section two Build MITK with CMake 

Create a new directory for the binary tree, change to it and call CMake:

<tt>
mkdir mitkBinary<br>
cd mitkBinary<br>
ccmake ../mitk</tt> (assuming you are still in the directory you did the checkout in<br>
<tt>make<br>
</tt>

If you use Windows, then you just start the CMake GUI and enter the location of the source and of the binary tree. 
CMake will create a Visual Studio solution in the root of your binary tree.

Essential variables to configure are ITK_DIR and VTK_DIR. The demo application can only be built with Qt3, Qt4 is not supported yet. 

\note "Installing" MITK via cmake (or using "make install") is not yet supported. You can find the application in <tt>&lt;binary_dir&gt;/mitk/bin</tt> and the libraries in <tt>&lt;binary_dir&gt;/mitk/lib</tt>.

\section Documentation

If you have the <a href="http://www.doxygen.org">Doxygen</a> documentation tool installed, you get  a new project (Visual Studio) or "make" target named "doc". You can build this to generate the HTML documentation of MITK in the Documentation/Doxygen directory of your binary tree or in the MITK_DOXYGEN_OUTPUT_DIR if specified. See below.

\section MITK specific configuration variables  
 - \b USE_QT: this can be set to OFF to build only the Qt-independent classes of MITK
 - \b MITK_BUILD_TUTORIAL: Build the tutorial applications (Step1 to n)
 - \b MITK_CHILI_PLUGIN: MITK can be used for building plugins for the CHILI teleradiology application (<a href="http://www.chili-radiology.com/">CHILI GmbH Heidelberg</A>). You need the CHILI SDK for this. 
 - \b MITK_DOXYGEN_OUTPUT_DIR: specify the directory where the doxygen documentation will we generated. 
 - \b USE_ITKZLIB: This should be ON in nearly all cases.
 - \b MITK_STARTUP_FUNCTIONALITY: This can be used to specify the functionality which should be activated first after launching the application.
 - \b MITK_USE_TD_MOUSE: (Win32 only) Set to ON if a 3Dconnexion mouse is available and the vendor driver is installed.

\section MITKConfig.cmake

\link NewFunctionalityPage

In the binary tree the MITKConfig.cmake file is generated. You can include it in your own project with

FIND_PACKAGE(MITK)

On Windows you also need
FIND_PACKAGE(ITK)
FIND_PACKAGE(VTK)
to get the library dependencies right.

After that you can set your include path with

INCLUDE_DIRECTORIES(${QMITK_INCLUDE_DIRS})

and create an application:

LINK_DIRECTORIES(${MITK_LINK_DIRECTORIES})
ADD_EXECUTABLE(MyApp MyApp.cpp)
TARGET_LINK_LIBRARIES(Step1 ${QMITK_LIBRARIES})


\note IMPORTANT: do not include the ITK_USE_FILE in your project when using MITK. There's a conflict in the ITK and MITK tree classes which will be resolved soon. 
*/
