
/**

\defgroup Renderer Renderer and RenderWindow Classes
\ingroup Visualization

\brief The MITK rendering model resembles the mechisms found in VTK. This section describes the  core components for coordinating rendering processes and render windows.

\section overviewVisualizationRenderer Overview

The following diagram displays the main components and their context:

\image html RenderingOverview.png "Classes related to rendering"

To visualize a dataset it needs to be stored in the DataTree. Depending on the application, the whole DataTree may be displayed, or merely parts of it. The rendering of individual data items (e.g. volumes or polygon models) is conducted by specific Mappers: each kind of visualizable data has its own corresponding Mapper implementation (see \ref Mapper).

MITK is designed to intrinsically provide different views on data. For example, a volume dataset is volume rendered in a 3D view, and displayed slice-wise in a 2D view. A polygon model would be displayed as a contour in 2D (i.e., the intersection of the 3D model and the respective 2D plane). This principle applies to all kinds of data, thereby ensuring a consistent visual representation regardless of the view type. It is realized by providing Mappers for each combination of data type and view type. Every item of the DataTree is associated with a list of Mappers, each capable of rendering the data item in a specific view.

RenderWindows represent the rendering target: an area of the user interface into which data is rendered. The actual rendering process is controlled by Renderers. They are configured to render the available data in a certain way. Specifically, this is determined by the associated WorldGeometry object(s); in a 2D view for example, the WorldGeometry2D tells the Renderer how to cut a 3D dataset to extract a 2D slice from it. Similarly, each data item of the DataTree has Geometry objects attached to it which describe the geometry of the data (e.g. its bounding box, location, or spatial conversion hints).


\section vtkVisualizationRenderer Encapsulating VTK Rendering Mechanisms

As a framework, MITK aims at making use of the visualization capabilities of VTK as much as possible. For the application developer building on top of MITK, the way of how to utilize specific VTK features should be straightforward and familiar. Therefore, most of the MITK rendering components closely resemble or integrate corresponding VTK components.

Just like VTK, MITK defines RenderWindows, Renderers and Mappers. These classes do not derive from their VTK counterparts, but integrate them and have similar scopes of responsibility. While the VTK rendering mechanism is mainly focused on establishing a pipeline of rendering components (data, filters, mappers, and renderers), MITK has a central DataTree and provides convenient ways of rendering different items of the tree according to their type. Internally, the VTK rendering pipeline is used as well in most cases, though it is more hidden from the application developer who merely makes use of existing rendering capabilities.

RenderWindow and Renderer are realized as separate components to enable multiple Renderers to draw into one RenderWindow. Usually one RenderWindow would have just one associated Renderer, but under special circumstances (e.g. when many small data views need to be rendered simultaneously, as with a thumbnail gallery), multiple Renderers on one RenderWindow can yield performance benefits.

Note that some Mappers (namely Mapper2D subclasses) do of yet not use VTK functionality for rendering. To further unify the rendering process, these classes should be revised or wrapped into a VTK-compatible interface.


\section renderingManagerVisualizationRenderer Controlling it All: RenderingManager

On a higher level, all rendering in MITK is managed and supervised by the RenderingManager. Its main task is to provide a central instance where any part of the application can request a repaint of a particular RenderWindow. Thereby, requests can be issued from multiple independent subroutines at one time, and only result in one repainting call, rather than induce many unnecessary rendering passes.

Another task is the supervision of ongoing rendering activities. For large datasets, high quality rendering might become very slow and thus impede smooth user interactions. To alleviate this, level-of-detail rendering and abort-mechanisms are introduced and controlled by the RenderingManager to achieve interactive frame rate and response times. Note that these features are not yet available but currently under development.

The rendering process could be further simplified by making the DataTree automatically detect data changes that require the data to be re-drawn. The fundamentals for such a mechanism already exist but still for many modifications a repainting request has to be issued by the entity causing it.


\section implementationManagerVisualizationRenderer Platform-Specific Implementation

To use the depictured components on a specific platform (i.e. GUI system), they have to be extended to interface the platform's native rendering capabilities. This can be done by subclassing the respective MITK classes and add the required functionality. For example, the RenderWindow is an abstract window into which mappers do render. In the QT specific implementation, QmitkRenderWindow derives from both RenderWindow (to avail of MITK rendering mechanisms) and QGLWidget (to have a valid GL context for painting). Of the above classes, RenderingManager needs also to be subclassed (to incorporate a platform-specific timer) while all other classes can be used directly (provided OpenGL is used for rendering, which is assumed).


*/