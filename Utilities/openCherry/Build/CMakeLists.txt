PROJECT(OpenCherryPluginGenerator)

CMAKE_MINIMUM_REQUIRED(VERSION 2.4)
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH RUNTIME_OUTPUT_PATH 
CMAKE_BACKWARDS_COMPATIBILITY CMAKE_INSTALL_PREFIX)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/BundleTemplate/BundleDefaults.cmake)

SET(PLUGIN_ID "" CACHE STRING "unique plugin id")
  
IF(PLUGIN_ID)

SET(PLUGIN_NAME "" CACHE STRING "")
SET(PLUGIN_VERSION "" CACHE STRING "Version of the functionality")
SET(PLUGIN_VENDOR "" CACHE STRING "Vendor of the functionality")

SET(ACTIVATOR_CLASS "" CACHE STRING "")

SET(VIEW_CLASS "" CACHE STRING "Class name of the new view (functionality)")
IF(VIEW_CLASS)
	STRING(TOUPPER ${VIEW_CLASS} UVIEW_CLASS)
ENDIF(VIEW_CLASS)
SET(VIEW_BASE_CLASS ${DEFAULT_VIEW_BASE_CLASS} CACHE STRING "")
SET(VIEW_BASE_CLASS_H ${DEFAULT_VIEW_BASE_CLASS_H} CACHE STRING "")
SET(VIEW_ID "" CACHE STRING "")

#SET(EDITOR_CLASS "" CACHE STRING "")
#SET(EDITOR_TYPE "" CACHE STRING "")

#SET(GENERATE_SERVICE "" CACHE STRING "")
#SET(GENERATE_SERVICE_CLASS "" CACHE STRING "")

SET(REQUIRED_BUNDLES ${DEFAULT_REQUIRED_BUNDLE} CACHE STRING "")

IF(ACTIVATOR_CLASS)
	SET(FULLY_QUALIFIED_ACTIVATOR "${BUNDLE_NAMESPACE}::${ACTIVATOR_CLASS}")
ELSE(ACTIVATOR_CLASS)
	SET(FULLY_QUALIFIED_ACTIVATOR "")
ENDIF(ACTIVATOR_CLASS)


FIND_FILE(PLUGIN_TEMPLATE BundleTemplate 
  ${PROJECT_SOURCE_DIR}
  DOC "Path to the plugin templates") 

	SET(PLUGIN_DIR ${CMAKE_CURRENT_BINARY_DIR}/${PLUGIN_ID})
	
	IF(NOT EXISTS ${PLUGIN_TEMPLATE}/META-INF/MANIFEST.MF)
			 MESSAGE(FATAL_ERROR "Could not find ${PLUGIN_TEMPLATE}/META-INF/MANIFEST.MF!") 
	ENDIF(NOT EXISTS ${PLUGIN_TEMPLATE}/META-INF/MANIFEST.MF)

	STRING(REPLACE . _ NormalizedPluginID ${PLUGIN_ID})
	STRING(TOUPPER ${NormalizedPluginID} UNormalizedPluginID)
	#START cut plugin_ID from last '.' till end
		SET(LAST_PART_PLUGIN_ID ${PLUGIN_ID})
		STRING(REGEX MATCH "\\.[^\\.]*$" LAST_PART_PLUGIN_ID ${LAST_PART_PLUGIN_ID})
		STRING(LENGTH ${LAST_PART_PLUGIN_ID} LengthStr)
		MATH(EXPR LengthStr "${LengthStr}-1")
		STRING(SUBSTRING ${LAST_PART_PLUGIN_ID} 1 ${LengthStr} LAST_PART_PLUGIN_ID) 
		MATH(EXPR LengthStr "${LengthStr}-1")
		STRING(SUBSTRING ${LAST_PART_PLUGIN_ID} 0 1 LAST_PART_PLUGIN_ID_FIRST_LETTER) 
		STRING(TOUPPER ${LAST_PART_PLUGIN_ID_FIRST_LETTER} LAST_PART_PLUGIN_ID_FIRST_LETTER)
		STRING(SUBSTRING ${LAST_PART_PLUGIN_ID} 1 ${LengthStr} LAST_PART_PLUGIN_ID_REST) 
		SET(LAST_PART_PLUGIN_ID ${LAST_PART_PLUGIN_ID_FIRST_LETTER}${LAST_PART_PLUGIN_ID_REST})
		STRING(TOUPPER ${LAST_PART_PLUGIN_ID} ULAST_PART_PLUGIN_ID)
	#END
	
	#MANIFEST FILE
	IF(ACTIVATOR_CLASS)
	 SET(FQ_ACTIVATOR_CLASS "${BUNDLE_NAMESPACE}::${ACTIVATOR_CLASS}")
	ENDIF(ACTIVATOR_CLASS)
	CONFIGURE_FILE(${PLUGIN_TEMPLATE}/META-INF/MANIFEST.MF ${PLUGIN_DIR}/META-INF/MANIFEST.MF @ONLY)
	

	# BundleDllTemplate.h
	IF(EXISTS ${PLUGIN_TEMPLATE}/src/BundleDllTemplate.h)
		IF(BUNDLE_NAMESPACE)
		STRING(TOUPPER ${BUNDLE_NAMESPACE} UBUNDLE_NAMESPACE)
		ENDIF(BUNDLE_NAMESPACE)
		IF(UBUNDLE_NAMESPACE)
			SET(DLL_DEFINE "${UBUNDLE_NAMESPACE}_${ULAST_PART_PLUGIN_ID}")
		ELSE(UBUNDLE_NAMESPACE)
			SET(DLL_DEFINE "${ULAST_PART_PLUGIN_ID}")
		ENDIF(UBUNDLE_NAMESPACE)
		
		
		SET(Dll_HEADER ${BUNDLE_NAMESPACE}${LAST_PART_PLUGIN_ID}Dll.h)
		CONFIGURE_FILE(${PLUGIN_TEMPLATE}/src/BundleDllTemplate.h ${PLUGIN_DIR}/src/${Dll_HEADER} @ONLY)		
	ENDIF(EXISTS ${PLUGIN_TEMPLATE}/src/BundleDllTemplate.h)

	# VIEW_TEMPLATE
	IF(VIEW_CLASS)
		IF(Dll_HEADER)
			SET(INCLUDE_DLL_H "#include \"${Dll_HEADER}\"")
		ENDIF(Dll_HEADER)
		IF(BUNDLE_NAMESPACE)
			SET(BEGIN_NAMESPACE "namespace ${BUNDLE_NAMESPACE} {")
			SET(END_NAMESPACE "} // ${BUNDLE_NAMESPACE}")
		ENDIF(BUNDLE_NAMESPACE)
		CONFIGURE_FILE(${PLUGIN_TEMPLATE}/src/ViewTemplate.h ${PLUGIN_DIR}/src/${BUNDLE_NAMESPACE}${VIEW_CLASS}.h @ONLY)
		#CONFIGURE_FILE(${PLUGIN_TEMPLATE}/src/ViewTemplate.cpp ${PLUGIN_DIR}/src/${BUNDLE_NAMESPACE}${VIEW_CLASS}.cpp @ONLY)
	ENDIF(VIEW_CLASS)
	
ENDIF(PLUGIN_ID)


