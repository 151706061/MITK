PROJECT(OpenCherryPluginGenerator)

CMAKE_MINIMUM_REQUIRED(VERSION 2.4)
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH RUNTIME_OUTPUT_PATH 
CMAKE_BACKWARDS_COMPATIBILITY CMAKE_INSTALL_PREFIX)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/BundleTemplate/BundleDefaults.cmake)

SET(PLUGIN_ID "" CACHE STRING "unique plugin id (i.e. your.domain.pluginid) (required)")
OPTION(GUI_SUPPORT "enable this if your plugin contributes to the UI" ON)
  
IF(PLUGIN_ID)

SET(PLUGIN_NAME "" CACHE STRING "a human-readable description of your plugin (required)")
SET(PLUGIN_VERSION "" CACHE STRING "plugin version (required)")
SET(PLUGIN_VENDOR "" CACHE STRING "plugin vendor (optional)")

SET(ACTIVATOR_CLASS "" CACHE STRING "class name for your plugin activator (optional)")

IF(GUI_SUPPORT)
  SET(VIEW_NAME "New View" CACHE STRING "a human-readable name of your view (required)")
  SET(VIEW_CLASS "" CACHE STRING "class name of the view")
  IF(VIEW_CLASS)
    STRING(TOUPPER ${VIEW_CLASS} UVIEW_CLASS)
  ENDIF(VIEW_CLASS)
  SET(VIEW_BASE_CLASS ${DEFAULT_VIEW_BASE_CLASS} CACHE STRING "base class of your new view class (required)")
  SET(VIEW_BASE_CLASS_H ${DEFAULT_VIEW_BASE_CLASS_H} CACHE STRING "base class header (required)")
  SET(VIEW_ID "" CACHE STRING "unique view id (i.e. your.domain.viewid) (required)")

  #SET(EDITOR_CLASS "" CACHE STRING "")
  #SET(EDITOR_TYPE "" CACHE STRING "")
ENDIF(GUI_SUPPORT)

#SET(GENERATE_SERVICE "" CACHE STRING "")
#SET(GENERATE_SERVICE_CLASS "" CACHE STRING "")

SET(_required_bundles ${DEFAULT_REQUIRED_BUNDLES})
IF(GUI_SUPPORT)
  SET(_required_bundles ${_required_bundles} org.opencherry.ui org.opencherry.ui.qt)
ENDIF(GUI_SUPPORT)
SET(REQUIRED_PLUGINS ${_required_bundles} CACHE STRING "a semicolon-separated list of required plugins (optional)")

IF(ACTIVATOR_CLASS)
	SET(FULLY_QUALIFIED_ACTIVATOR "${BUNDLE_NAMESPACE}::${ACTIVATOR_CLASS}")
ELSE(ACTIVATOR_CLASS)
	SET(FULLY_QUALIFIED_ACTIVATOR "")
ENDIF(ACTIVATOR_CLASS)


FIND_FILE(PLUGIN_TEMPLATE BundleTemplate 
          ${PROJECT_SOURCE_DIR}
          DOC "Path to the plugin templates") 

SET(PLUGIN_DIR ${CMAKE_CURRENT_BINARY_DIR}/${PLUGIN_ID})
	
IF(NOT EXISTS ${PLUGIN_TEMPLATE}/META-INF/MANIFEST_TEMPLATE.MF)
  MESSAGE(FATAL_ERROR "Could not find ${PLUGIN_TEMPLATE}/META-INF/MANIFEST_TEMPLATE.MF!") 
ENDIF(NOT EXISTS ${PLUGIN_TEMPLATE}/META-INF/MANIFEST_TEMPLATE.MF)

STRING(REPLACE . _ NormalizedPluginID ${PLUGIN_ID})
STRING(TOUPPER ${NormalizedPluginID} UNormalizedPluginID)

# ----- START cut plugin_ID from last '.' till end ------------
SET(LAST_PART_PLUGIN_ID ${PLUGIN_ID})
STRING(REGEX MATCH "\\.[^\\.]*$" LAST_PART_PLUGIN_ID ${LAST_PART_PLUGIN_ID})
STRING(LENGTH ${LAST_PART_PLUGIN_ID} LengthStr)
MATH(EXPR LengthStr "${LengthStr}-1")
STRING(SUBSTRING ${LAST_PART_PLUGIN_ID} 1 ${LengthStr} LAST_PART_PLUGIN_ID) 
MATH(EXPR LengthStr "${LengthStr}-1")
STRING(SUBSTRING ${LAST_PART_PLUGIN_ID} 0 1 LAST_PART_PLUGIN_ID_FIRST_LETTER) 
STRING(TOUPPER ${LAST_PART_PLUGIN_ID_FIRST_LETTER} LAST_PART_PLUGIN_ID_FIRST_LETTER)
STRING(SUBSTRING ${LAST_PART_PLUGIN_ID} 1 ${LengthStr} LAST_PART_PLUGIN_ID_REST) 
SET(LAST_PART_PLUGIN_ID ${LAST_PART_PLUGIN_ID_FIRST_LETTER}${LAST_PART_PLUGIN_ID_REST})
STRING(TOUPPER ${LAST_PART_PLUGIN_ID} ULAST_PART_PLUGIN_ID)
# ------ END --------------------------------------------------
	

# --------------------- META-INF/MANIFEST_TEMPLATE.MF ---------------------
IF(ACTIVATOR_CLASS)
  SET(FQ_ACTIVATOR_CLASS "${BUNDLE_NAMESPACE}::${ACTIVATOR_CLASS}")
ENDIF(ACTIVATOR_CLASS)

SET(REQUIRED_BUNDLES_MF "${REQUIRED_BUNDLES}")
STRING(REPLACE ";" "," REQUIRED_BUNDLES_MF "${REQUIRED_BUNDLES_MF}" )
CONFIGURE_FILE(${PLUGIN_TEMPLATE}/META-INF/MANIFEST_TEMPLATE.MF ${PLUGIN_DIR}/META-INF/MANIFEST.MF @ONLY)
	

# -------------------- BundleDllTemplate.h -------------------------------
IF(EXISTS ${PLUGIN_TEMPLATE}/src/BundleDllTemplate.h)
  IF(BUNDLE_NAMESPACE)
    STRING(TOUPPER ${BUNDLE_NAMESPACE} UBUNDLE_NAMESPACE)
  ENDIF(BUNDLE_NAMESPACE)
  IF(UBUNDLE_NAMESPACE)
    SET(DLL_DEFINE "${UBUNDLE_NAMESPACE}_${ULAST_PART_PLUGIN_ID}")
  ELSE(UBUNDLE_NAMESPACE)
    SET(DLL_DEFINE "${ULAST_PART_PLUGIN_ID}")
  ENDIF(UBUNDLE_NAMESPACE)
		
		
  SET(Dll_HEADER ${BUNDLE_NAMESPACE}${LAST_PART_PLUGIN_ID}Dll.h)
  CONFIGURE_FILE(${PLUGIN_TEMPLATE}/src/BundleDllTemplate.h ${PLUGIN_DIR}/src/${Dll_HEADER} @ONLY)		
ENDIF(EXISTS ${PLUGIN_TEMPLATE}/src/BundleDllTemplate.h)


# --------------------- src/ViewTemplate[.h,.cpp] ----------------------------
IF(VIEW_CLASS)
  SET(VIEW_CLASS_H "${BUNDLE_NAMESPACE}${VIEW_CLASS}.h")
  SET(VIEW_CLASS_CPP "${BUNDLE_NAMESPACE}${VIEW_CLASS}.cpp")
  IF(Dll_HEADER)
    SET(INCLUDE_DLL_H "#include \"${Dll_HEADER}\"")
  ENDIF(Dll_HEADER)
  
  IF(BUNDLE_NAMESPACE)
    SET(BEGIN_NAMESPACE "namespace ${BUNDLE_NAMESPACE} {")
    SET(END_NAMESPACE "} //namespace ${BUNDLE_NAMESPACE}")
  ENDIF(BUNDLE_NAMESPACE)
  CONFIGURE_FILE(${PLUGIN_TEMPLATE}/src/ViewTemplate.h ${PLUGIN_DIR}/src/${VIEW_CLASS_H} @ONLY)
  CONFIGURE_FILE(${PLUGIN_TEMPLATE}/src/ViewTemplate.cpp ${PLUGIN_DIR}/src/${VIEW_CLASS_CPP} @ONLY)
ENDIF(VIEW_CLASS)
	
# ---------------------- pluginTemplate.xml ---------------------------------
IF(VIEW_CLASS)
  SET(XP_VIEW "  <extension point=\"org.opencherry.ui.views\">
    <view id=\"${VIEW_ID}\"
          name=\"${VIEW_NAME}\"
          class=\"${BUNDLE_NAMESPACE}::${VIEW_CLASS}\" />
  </extension>"
)
ENDIF(VIEW_CLASS)
CONFIGURE_FILE(${PLUGIN_TEMPLATE}/pluginTemplate.xml ${PLUGIN_DIR}/plugin.xml @ONLY)

# ---------------------- CMakeListsTemplate.txt -----------------------------
FOREACH(_plugin ${REQUIRED_PLUGINS})
  SET(REQUIRED_PLUGINS_CMAKE "${REQUIRED_PLUGINS_CMAKE} ${_plugin}")
ENDFOREACH(_plugin ${REQUIRED_PLUGINS})
CONFIGURE_FILE(${PLUGIN_TEMPLATE}/CMakeListsTemplate.txt ${PLUGIN_DIR}/CMakeLists.txt @ONLY)
	
# ---------------------- filesTemplate.cmake ------------------------------
SET(PLUGIN_SOURCES "")
IF(VIEW_CLASS)
  SET(PLUGIN_SOURCES "${VIEW_CLASS_CPP}\n")
ENDIF(VIEW_CLASS)
CONFIGURE_FILE(${PLUGIN_TEMPLATE}/filesTemplate.cmake ${PLUGIN_DIR}/files.cmake @ONLY)
	
ENDIF(PLUGIN_ID)


