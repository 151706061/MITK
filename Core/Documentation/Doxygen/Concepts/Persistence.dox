/**
\page PersistenceConceptPage Persistence Concept

In general, persistence referes to the capability of an application to permanently store data, settings, states, etc. so that they outlive a restart. Normal data objects, such as images, surfaces, etc., which are visible in the data storage of MITK can be saved easily by the save/load functions, see \ref DataManagementPage for more details. This page focus on the persistence of settings, configurations, object states and parameters of the application. Depending on the component, e.g. plugin, module, etc., where you want to store your settings, MITK together offers multiple ways to do so:
-# For code inside UI independet modules with low dependiencies to other libraries the mitk::PersistenceService inside the MITK persistence module can be used to  store prameters by using the mitk::PropertyList class: \ref PersistenceMITKService
-# UI dependent code where the Qt library is available can use QSettings: \ref PersistenceQTSetting
-# If the UI setting of Plugins should be stored permanentely, the TODO of blueberry can be used: \ref PersistenceBlueberry
-# Extended features, which include persistence, are provided by the configuration service. \ref PersistenceConfigurationService

\section PersistenceMITKService MITK Persistence Service



\section PersistenceQTSetting Qt Settings

\code
//in the header:
  #include <QSettings>
  //[...}
  QSettings m_MySettings;

//in the cpp file:
  //initialize the settings object (e.g. constructuor):
  m_MySettings("MyClass","MyDescription")
  //store settings:
  m_MySettings.setValue("identifier",value);
  //load settings:
  int intExample = m_MySettings.value("identifier").toInt();
\endcode

*/

\section PersistenceBlueberry TODO

\section PersistenceConfigurationService TODO