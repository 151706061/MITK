/**

\page DICOMTesting MITK DICOM testing

\section DICOMTesting_introduction Introduction

Since loading a set of DICOM images is not a trivial task, MITK implements some tests
which verify its DICOM loading ability.

\section DICOMTesting_problem Problem description

The task of loading DICOM files into mitk::Images is a challenge because of major differences
in the way that DICOM and MITK represent images:

 - DICOM images 
   - are mostly stored as one slice per file
   - do not describe how they can be arraged into image stacks with orthogonal axis
   - sometimes they cannot be arranged in image stacks as described above (e.g. tilted gantry)
 - mitk::Image (at least its mature areas)
   - represents image stacks with orthogonal axis (nothing like a tilted gantry)
   - have a concept of a fourth dimension (time steps)

Because image processing applications based on MITK still need a way to load DICOM images into 
mitk::Image objects, MITK needs to put a lot of effort into building image stacks as best as it can. And this needs to be well tested.

For more background information, see David Clunie's most valuable posts on comp.protocols.dicom, e.g.:

 - http://groups.google.com/group/comp.protocols.dicom/browse_thread/thread/6db91972e161f0d4/6e0304ac264a6eb5
 - http://groups.google.com/group/comp.protocols.dicom/browse_thread/thread/e9bd1497bea3e66b/187a7dc8810613d2
 - http://groups.google.com/group/comp.protocols.dicom/browse_thread/thread/5d80bb0b7fafcb81/cf96119e3b024ed8
 - http://groups.google.com/group/comp.protocols.dicom/browse_thread/thread/4568635e083a3fba/e2a8ceec23032601

\section DICOMTesting_testidea Test principle

The test idea is simple: load known sets of DICOM files, 
analyze relevant aspects of the generated mitk::Image 
objects and compare against stored expected results:
 - number of 3D images generated
 - origin, orientation
 - pixel type, spacing, extent

\section DICOMTesting_implementation Implementation

\section DICOMTesting_implementation_utils Test helpers (applications and classes)

<b>Application DumpDICOMMitkImage</b>

Takes a list of DICOM images, loads them using TestDICOMLoading, then dumps information
about the resulting mitk::Images to standard output.

This application is helpful when defining reference data for tests.

<b>Application VerifyDICOMMitkImageDump</b>

Takes a list of DICOM images and loads them using TestDICOMLoading. 
Takes a dump file as generated by DumpDICOMMitkImage, parses it and
compares it to actually generated mitk::Images.

This application is used to implement the majority of test cases. They all
load images, then verify the expected result structure.

<b>Class TestDICOMLoading</b>

\section DICOMTesting_testlist Specific tests

This list is meant to provide an up-to-date list of all implemented DICOM loading tests.
<b>If you ever find this outdated, please update it or make the persons who invalidated the list update it.</b>

<b>mitkDICOMTestingSanityTest_*</b>
These tests implement basic testing of the implemented helper classes. The tests use DicomSeriesReader to load
a number of DICOM image. They verify:
 - DicomSeriesReader recognizes all input files as DICOM images
 - DicomSeriesReader generates a number of mitk::Images from the DICOM images
 - the number of mitk::Images matches a number given on the command line or CTest's add_test()
 - helper methods in class TestDICOMLoading make minimal sense (comparison of an image dump to itself must be valid)

*/

