# import the value of VARNAME from DIR to current CMakeLists.txt
# todo: check if variable exists
MACRO(IMPORT_VARIABLES IMPORTDIR)
GET_FILENAME_COMPONENT(ABSOLUTE_DIR ${IMPORTDIR} ABSOLUTE)
FOREACH(IMPORTVAR ${ARGN})
  GET_DIRECTORY_PROPERTY(${IMPORTVAR} 
    DIRECTORY ${ABSOLUTE_DIR}
    DEFINITION ${IMPORTVAR}
  )
ENDFOREACH(IMPORTVAR)
ENDMACRO(IMPORT_VARIABLES)

FOREACH(FUNC_NAME ${${KITNAME}FUNCTIONALITY_NAMES} ${MITKQMFUNCTIONALITY_NAMES})
MESSAGE(STATUS "Adding ${FUNC_NAME} to MainApp")
SET(FUNC_LIBRARIES ${FUNC_LIBRARIES} ${FUNC_NAME})
SET(REGISTER_FUNCTIONALITY_DEFINITIONS "${REGISTER_FUNCTIONALITY_DEFINITIONS} 
  bool Register${FUNC_NAME}();"
)
SET(REGISTER_FUNCTIONALITY_CALLS "${REGISTER_FUNCTIONALITY_CALLS} 
  Register${FUNC_NAME}();"
)
ENDFOREACH(FUNC_NAME)
CONFIGURE_FILE(RegisterFunctionalityCalls.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/RegisterFunctionalityCalls.cpp @ONLY)
# CONFIGURE_FILE(RegisterFunctionalityCalls.h.in RegisterFunctionalityCalls.h @ONLY)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
SET(MAIN_APP_CPP SampleApp.cpp SampleAppMain.cpp ${CMAKE_CURRENT_BINARY_DIR}/RegisterFunctionalityCalls.cpp)
QT_WRAP_CPP(MainApp MAIN_APP_CPP SampleApp.h)

ADD_EXECUTABLE(MainApp ${MAIN_APP_CPP})
TARGET_LINK_LIBRARIES(MainApp Qmitk ${FUNC_LIBRARIES}) 
