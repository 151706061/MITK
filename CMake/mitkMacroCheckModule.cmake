# Usage: MITK_CHECK_MODULE(RESULT_VAR [dependencies ...] )
# check if all required modules exist and stores missing module names in RESULT_VAR.
MACRO(MITK_CHECK_MODULE RESULT_VAR)
  SET(${RESULT_VAR} "")
  SET(DEPENDS "")
  SET(DEPENDS_BEFORE "not initialized")
  SET(PACKAGE_DEPENDS "")
  
  # check for each parameter if it is a package (3rd party)
  FOREACH(package ${ARGN})
    SET(is_package)
    FOREACH(dir ${MODULES_PACKAGE_DEPENDS_DIRS})
      IF(EXISTS "${dir}/MITK_${package}_Config.cmake") 
        LIST(APPEND PACKAGE_DEPENDS ${package})
        SET(is_package 1)
        BREAK()
      ENDIF()
    ENDFOREACH()
    IF(NOT is_package)
      LIST(APPEND DEPENDS ${package}) 
    ENDIF()
  ENDFOREACH(package)

  WHILE(NOT "${DEPENDS}" STREQUAL "${DEPENDS_BEFORE}")
    SET(DEPENDS_BEFORE ${DEPENDS})
    FOREACH(dependency ${DEPENDS})
      SET(_module_found 1)
      IF(NOT ${dependency}_CONFIG_FILE)
        SET(_module_found 0)
      ENDIF()
      SET(_dependency_file_name ${${dependency}_CONFIG_FILE})
      IF(NOT EXISTS ${_dependency_file_name})
        SET(_module_found 0)
      ENDIF()

      IF(_module_found)
        INCLUDE(${_dependency_file_name})
        IF(${dependency}_IS_ENABLED)
          LIST(APPEND DEPENDS ${${dependency}_DEPENDS})
          LIST(APPEND PACKAGE_DEPENDS ${${dependency}_PACKAGE_DEPENDS})
        ELSE(${dependency}_IS_ENABLED)
          LIST(APPEND ${RESULT_VAR} ${dependency})
          LIST(REMOVE_DUPLICATES ${RESULT_VAR})
        ENDIF(${dependency}_IS_ENABLED)
      ELSE()
        LIST(APPEND ${RESULT_VAR} ${dependency})
        LIST(REMOVE_DUPLICATES ${RESULT_VAR})
      ENDIF()

    ENDFOREACH(dependency) 
    LIST(REMOVE_DUPLICATES DEPENDS)
    LIST(REMOVE_DUPLICATES PACKAGE_DEPENDS)
    LIST(SORT DEPENDS)
    LIST(SORT PACKAGE_DEPENDS)
  ENDWHILE()
  
  FOREACH(_package PACKAGE_DEPENDS)
    IF((DEFINED MITK_USE_${_package}) AND NOT (${MITK_USE_${_package}}))
      LIST(APPEND ${RESULT_VAR} ${_package})
    ENDIF()  
  ENDFOREACH()

ENDMACRO(MITK_CHECK_MODULE)
