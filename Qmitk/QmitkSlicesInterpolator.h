/*=========================================================================
 
Program:   Medical Imaging & Interaction Toolkit
Language:  C++
Date:      $Date$
Version:   $Revision$
 
Copyright (c) German Cancer Research Center, Division of Medical and
Biological Informatics. All rights reserved.
See MITKCopyright.txt or http://www.mitk.org/copyright.html for details.
 
This software is distributed WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the above copyright notices for more information.
 
=========================================================================*/

#ifndef QmitkSlicesInterpolator_h_Included
#define QmitkSlicesInterpolator_h_Included

#include <qvbox.h>

#include "mitkSliceNavigationController.h"
#include "mitkSegmentationInterpolation.h"
#include "mitkDataTreeNode.h"

namespace mitk
{
  class ToolManager;
  class PlaneGeometry;
}

class QmitkStdMultiWidget;
class QPushButton;

/**
  \brief GUI for slices interpolation.

  \ingroup Reliver
  \ingroup Widgets

  \sa QmitkSliceBasedSegmentation
  \sa mitk::SegmentationInterpolation
  
  There is a separate page describing the general design of QmitkSliceBasedSegmentation: \ref QmitkSliceBasedSegmentationTechnicalPage

  While mitk::SegmentationInterpolation does the bookkeeping of interpolation 
  (keeping track of which slices contain how much segmentation) and the algorithmic work, 
  QmitkSlicesInterpolator is responsible to watch the GUI, to notice, which slice is currently
  visible. It triggers generation of interpolation suggestions and also triggers acception of
  suggestions.

  \todo show/hide feedback on demand

  Last contributor: $Author$
*/
class QmitkSlicesInterpolator : public QVBox
{
  Q_OBJECT

  public:
    
    QmitkSlicesInterpolator(QWidget* parent = 0, const char* name = 0);

    /**
      To be called once before real use.
      */
    void Initialize(mitk::ToolManager* toolManager, QmitkStdMultiWidget* multiWidget);

    virtual ~QmitkSlicesInterpolator();

    /**
      Just public because it is called by itk::Commands. You should not need to call this.
    */
    void OnToolManagerWorkingDataModified(const itk::EventObject&);

    /**
      Just public because it is called by itk::Commands. You should not need to call this.
    */
    void OnTransversalSliceChanged(const itk::EventObject&);

    /**
      Just public because it is called by itk::Commands. You should not need to call this.
    */
    void OnSagittalSliceChanged(const itk::EventObject&);

    /**
      Just public because it is called by itk::Commands. You should not need to call this.
    */
    void OnFrontalSliceChanged(const itk::EventObject&);
    
    /**
      Just public because it is called by itk::Commands. You should not need to call this.
    */
    void OnInterpolationInfoChanged(const itk::EventObject&);

  signals:

  public slots:

    /**
      Call this from the outside to enable/disable interpolation
    */
   void EnableInterpolation(bool);

  protected slots:

    /**
      Reaction to button clicks.
    */
    void OnAcceptInterpolationClicked();

    /**
      Reaction to button clicks.
    */
    void OnAcceptAllInterpolationsClicked();

    /**
      Called on activation/deactivation
    */
    void OnInterpolationActivated(bool);

  protected:
    
    /**
      Retrieves the currently selected PlaneGeometry from a SlicedGeometry3D that is generated by a SliceNavigationController
      and calls Interpolate to further process this PlaneGeometry into an interpolation.

      \param e is a actually a mitk::SliceNavigationController::GeometrySliceEvent, sent by a SliceNavigationController
      \param sliceDimension the dimension which is constant for all pixels of the image slice (e.g. 2 for transversal)
    */
    bool TranslateAndInterpolateChangedSlice(const itk::EventObject& e, unsigned int sliceDimension);

    /**
      Given a PlaneGeometry, this method figures out which slice of the first working image (of the associated ToolManager)
      should be interpolated. The actual work is then done by our SegmentationInterpolation object.
     */
    void Interpolate( unsigned int sliceDimension, mitk::PlaneGeometry* plane );

    /**
      Called internally to update the interpolation suggestion. Finds out about the focused render window and requests an interpolation.
     */
    void UpdateVisibleSuggestion();

    mitk::SegmentationInterpolation::Pointer m_Interpolator;

    QmitkStdMultiWidget* m_MultiWidget;
    mitk::ToolManager* m_ToolManager;
    bool m_Initialized;

    unsigned int DataObserverTag;
    unsigned int TSliceObserverTag;
    unsigned int SSliceObserverTag;
    unsigned int FSliceObserverTag;
    unsigned int InterpolationInfoChangedObserverTag;

    QPushButton* m_BtnAcceptInterpolation;
    QPushButton* m_BtnAcceptAllInterpolations;

    mitk::DataTreeNode::Pointer m_FeedbackNode;

    mitk::Image* m_Segmentation;
    unsigned int m_LastSliceDimension;
    unsigned int m_LastSliceIndex;

    bool m_InterpolationEnabled;
};

#endif

